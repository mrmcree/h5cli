#!/usr/bin/env node

const program = require("commander");
const chalk = require("chalk");
const ora = require("ora");
const download = require("download-git-repo");
const tplObj = require(`${__dirname}/../template`);
const logSymbols = require("log-symbols");
const inquirer = require("inquirer");
const pug = require("pug");
const fs = require("fs");
var confirmPath = function (pathStr) {
	if (!fs.existsSync(pathStr)) {
		fs.mkdirSync(pathStr);
		console.log("createPath: " + pathStr);
	}
};
const main = async () => {
	program.usage("<template-name> [project-name]");
	program.parse(process.argv);

	if (program.args.length < 1) return program.help();

	let templateName = program.args[0];
	let projectName = program.args[1];
	// 校验参数
	if (!tplObj[templateName]) {
		console.log("\n" + logSymbols.error, chalk.red("模板不存在 \n "));
		return;
	}
	if (!projectName) {
		console.log("\n" + logSymbols.error, chalk.red("项目名称不能为空 \n "));
		return;
	}
	await confirmPath(`${__dirname}/../${projectName}`);
	await confirmPath(`${__dirname}/../${projectName}/src`);
	const promptList = [
		{
			type: "input",
			message: "项目名",
			name: "pagetitle",
			default: "pagetitle", // 默认值
		},
	];
};

url = tplObj[templateName];

console.log(chalk.white("\n Start generating... \n"));
// 出现加载图标
const spinner = ora("下载中...");
spinner.start();
// 执行下载方法并传入参数
await download(url, projectName, (err) => {
	if (err) {
		spinner.fail();
		console.log(logSymbols.error, chalk.red(`Generation failed. ${err}`));
		return;
	}
	// 结束加载图标
	spinner.succeed();
	console.log(
		"\n" + logSymbols.success,
		chalk.green("Generation completed!")
	);
	console.log("\n To get started");
	console.log(`\n    cd ${projectName} \n
                  yarn install | npm install
    `);
});
main();
